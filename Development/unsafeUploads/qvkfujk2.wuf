Dictionary<string, string> keyValuePairs = new Dictionary<string, string>();

for (int i = 0; i < 4; i++)
{
    keyValuePairs["A"+i]="da"+i.ToString();
}
InsertText(sameListFilePath, "mySheet", keyValuePairs);
InsertText(differentListFilePath, "mySheet", keyValuePairs);

static void InsertText(string docName, string sheetName, Dictionary<string, string> referenceAndValue)
{
    // Open the document for editing.
    using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(docName, true))
    {
        // Get the SharedStringTablePart. If it does not exist, create a new one.
        SharedStringTablePart shareStringPart;
        if (spreadSheet.WorkbookPart.GetPartsOfType<SharedStringTablePart>().Count() > 0)
        {
            shareStringPart = spreadSheet.WorkbookPart.GetPartsOfType<SharedStringTablePart>().First();
        }
        else
        {
            shareStringPart = spreadSheet.WorkbookPart.AddNewPart<SharedStringTablePart>();
        }
       
        // Insert a new worksheet.
        //WorksheetPart worksheetPart = InsertWorksheet(spreadSheet.WorkbookPart);
        //写入现有工作表

        WorksheetPart? worksheetPart = spreadSheet.WorkbookPart.WorksheetParts.FirstOrDefault();
        // Insert cell A1 into the new worksheet.
        // Insert the text into the SharedStringTablePart.
        foreach (var item in referenceAndValue)
        {
            char[] chars = item.Key.ToCharArray();
            string referenceColum = chars[0].ToString();
            uint referenceIndex = 0;
            string indexString ="";
            //获取索引
            foreach (char c in chars) 
            {
                indexString = indexString + c;
            }
            indexString = indexString.Substring(1);
            uint.TryParse(indexString, out  referenceIndex);
            if (item.Value != null )
            {
                if (Regex.IsMatch(item.Value, @"[a-zA-Z]")|| Regex.IsMatch(item.Value, @"[!@#$%^&*()\-_=+{};:,<.>]"))
                {
                    int index = InsertSharedStringItem(item.Value, shareStringPart);
                    Cell cell = InsertCellInWorksheet(referenceColum, referenceIndex, worksheetPart);

                    // Set the value of cell A1.

                    cell.CellValue = new CellValue(index.ToString());
                    cell.DataType = new EnumValue<CellValues>(CellValues.SharedString);
                }
                else
                {
                    Cell cell = InsertCellInWorksheet(referenceColum, referenceIndex, worksheetPart);

                    // Set the value of cell A1.

                    cell.CellValue = new CellValue(item.Value);
                    //cell.DataType = new EnumValue<CellValues>(CellValues.SharedString);
                }
            }
            else
            {
                Cell cell = InsertCellInWorksheet(referenceColum, referenceIndex, worksheetPart);

                // Set the value of cell A1.

                cell.CellValue = new CellValue(item.Value);
                cell.DataType = new EnumValue<CellValues>(CellValues.String);
            }
        }
        // Save the new worksheet.
        worksheetPart.Worksheet.Save();
    }
}

// Given text and a SharedStringTablePart, creates a SharedStringItem with the specified text 
// and inserts it into the SharedStringTablePart. If the item already exists, returns its index.
static int InsertSharedStringItem(string text, SharedStringTablePart shareStringPart)
{
    // If the part does not contain a SharedStringTable, create one.
    if (shareStringPart.SharedStringTable == null)
    {
        shareStringPart.SharedStringTable = new SharedStringTable();
    }

    int i = 0;

    // Iterate through all the items in the SharedStringTable. If the text already exists, return its index.
    foreach (SharedStringItem item in shareStringPart.SharedStringTable.Elements<SharedStringItem>())
    {
        if (item.InnerText == text)
        {
            return i;
        }

        i++;
    }

    // The text does not exist in the part. Create the SharedStringItem and return its index.
    shareStringPart.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(text)));
    shareStringPart.SharedStringTable.Save();

    return i;
}

// Given a column name, a row index, and a WorksheetPart, inserts a cell into the worksheet. 
// If the cell already exists, returns it. 
static Cell InsertCellInWorksheet(string columnName, uint rowIndex, WorksheetPart worksheetPart)
{
    Worksheet worksheet = worksheetPart.Worksheet;
    SheetData sheetData = worksheet.GetFirstChild<SheetData>();
    string cellReference = columnName + rowIndex;

    // If the worksheet does not contain a row with the specified row index, insert one.
    Row row;
    if (sheetData.Elements<Row>().Where(r => r.RowIndex == rowIndex).Count() != 0)
    {
        row = sheetData.Elements<Row>().Where(r => r.RowIndex == rowIndex).First();
    }
    else
    {
        row = new Row() { RowIndex = rowIndex };
        sheetData.Append(row);
    }

    // If there is not a cell with the specified column name, insert one.  
    if (row.Elements<Cell>().Where(c => c.CellReference.Value == columnName + rowIndex).Count() > 0)
    {
        return row.Elements<Cell>().Where(c => c.CellReference.Value == cellReference).First();
    }
    else
    {
        // Cells must be in sequential order according to CellReference. Determine where to insert the new cell.
        Cell refCell = null;
        foreach (Cell cell in row.Elements<Cell>())
        {
            if (string.Compare(cell.CellReference.Value, cellReference, true) > 0)
            {
                refCell = cell;
                break;
            }
        }

        Cell newCell = new Cell() { CellReference = cellReference };
        row.InsertBefore(newCell, refCell);

        worksheet.Save();
        return newCell;
    }
}
